
//== PROGRAM LINK STATUS = TRUE
//== PROGRAM VALIDATE STATUS = FALSE
/*== INFO LOG ==
No errors.
  == INFO LOG END ==*/

//======================================================
//   Vertex Shader 1 
//======================================================

//== SHADER COMPILE STATUS = TRUE
/*== INFO LOG ==
No errors.
  == INFO LOG END ==*/
#version 330

layout(location = 0) in vec3 in_position;		
layout(location = 1) in vec3 in_normal;		

uniform mat4 model_matrix, view_matrix, projection_matrix;

out vec3 world_pos;
out vec3 world_normal;

void main(){

	world_pos = (model_matrix * vec4(in_position,1)).xyz;
	world_normal = normalize(  mat3(model_matrix) *  in_normal );

	gl_Position = projection_matrix*view_matrix*model_matrix*vec4(in_position,1); 
}

//======================================================
//   Fragment Shader 2
//======================================================

//== SHADER COMPILE STATUS = TRUE
/*== INFO LOG ==
No errors.
  == INFO LOG END ==*/
#version 330
layout(location = 0) out vec4 out_color;

uniform vec3 light_position;
uniform vec3 eye_position;
uniform int material_shininess;
uniform vec3 material_kd;
uniform vec3 material_ks;

in vec3 world_pos;
in vec3 world_normal;


vec3 L;
vec3 V;
vec3 H;

void main(){
	
	vec3 color = vec3(0, 0, 0);
	
	L = normalize ( light_position - world_pos); 
	V = normalize  ( eye_position - world_pos);
	H = normalize(L + V);

	vec3 ambient = vec3(0.1, 0.1, 0.1);
	int get_color = (dot(world_normal, L)> 0) ? 1 : 0;
	vec3 dif = material_kd * max(dot(world_normal, L), 0);
	vec3 spec = material_ks * get_color * pow((max(dot(world_normal, H), 0)), material_shininess);

	color = ambient + dif + spec;

	out_color = vec4(color.x, color.y, color.z, 1);
} 